# render.yaml
services:
  # --- Backend (Flask) ---
  - type: web
    runtime: python
    name: npcchatter-backend
    # Run from the repository root so the top-level `app.py` WSGI entrypoint
    # is importable as `app:app`. This avoids relative-import failures when
    # Gunicorn imports modules.
    rootDir: .
    autoDeployTrigger: commit
    # Install the backend requirements file which lives under backend/
    buildCommand: pip install -r backend/requirements.txt
  # Start the monolithic backend module so legacy routes implemented in
  # `backend/app.py` (e.g. /api/campaigns/test/join, /api/users/me/active-campaign)
  # remain available to the frontend.
  startCommand: gunicorn -k eventlet -w 1 backend.app:app -b 0.0.0.0:$PORT
    envVars:
      - key: APP_ENV
        value: production
      - key: ALLOWED_ORIGINS
        value: |
          https://npcchatter.com,
          https://www.npcchatter.com,
          https://npcchatter-frontend.onrender.com,
          http://localhost:5173
      - key: DATABASE_URL
        sync: false
      - key: REDIS_URL
        sync: false
      - key: JWT_SECRET
        sync: false

  # --- Frontend (Static Site) ---
  - type: web
    runtime: static
    name: npcchatter-frontend
    rootDir: frontend
    autoDeployTrigger: commit
    previews:
      generation: automatic
    buildCommand: npm ci && npm run build
    staticPublishPath: dist
    routes:
      - type: rewrite
        source: '/*'
        destination: '/index.html'
    # NOTE: domains removed to avoid "already taken" blueprint error.
    envVars:
      - key: VITE_API_BASE
        # Use the backend's public URL. Replace after first deploy if needed.
        value: https://npcchatter-backend.onrender.com